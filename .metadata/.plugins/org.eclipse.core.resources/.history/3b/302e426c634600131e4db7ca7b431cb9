object Problem10 {
	lazy val primeN: Stream[Int] = 2 #:: Stream.from(3).filter(i => primeN.takeWhile(j => j * j <= i).forall(i % _ > 0))
                                                  //> primeN: => Stream[Int]\
	
	val r = primeN.view.takeWhile(_ < 2000000).foldLeft(0L)(_ + _)
	
	type Histogram = Map[Int, Int]
def histogram(course: Course): Histogram = {
val studentsPerGrade = studentMeans(course).groupBy {
case (name, mean) => math.round(mean)
}
studentsPerGrade map {
case (grade, students) => (grade, students.size)
}
}
	
}