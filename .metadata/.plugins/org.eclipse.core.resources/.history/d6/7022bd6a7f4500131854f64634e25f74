object Problem7 {
	def EratosteneSieve(s: Stream[Int]): Stream[Int] = {
    s.head #:: EratosteneSieve(s.tail.filter(_ % s.head != 0))
  }                                               //> EratosteneSieve: (s: Stream[Int])Stream[Int]
  lazy val primes = EratosteneSieve(Stream.from(2))
                                                  //> primes: => Stream[Int]
  
  // Hence, first n primes are given by
  
	primes(10001)                             //> java.lang.OutOfMemoryError: Java heap space
                                                  //| 	at scala.collection.immutable.Stream$.filteredTail(Stream.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream.filter(Stream.scala:474)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$filteredTail$1.apply(Strea
                                                  //| m.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$filteredTail$1.apply(Strea
                                                  //| m.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1085)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1077)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$filteredTail$1.apply(Strea
                                                  //| m.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$filteredTail$1.apply(Strea
                                                  //| m.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1085)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1077)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$filteredTail$1.apply(Strea
                                                  //| m.scala:1149)
                                                  //| 	at scala.collection.immutable.Stream$$ano
                                                  //| Output exceeds cutoff limit.
  
}